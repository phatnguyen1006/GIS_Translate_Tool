import { useState } from "react";
import type { NextPage } from "next";
import { Input, Select, Button, Form } from "antd";
import { CaretUpOutlined } from "@ant-design/icons";

import { shiftBlock } from "@function";
import { ShiftPointCrops } from "@types";
import { splitFunction, ILocationInput } from "@helpers";

import styles from "../styles/Home.module.css";

const { Option } = Select;
const { TextArea } = Input;

const layout = {
  labelCol: { span: 8 },
  wrapperCol: { span: 16 },
};

const ShiftBlock: NextPage = () => {
  const [formValue, setFormValue] = useState<Array<ShiftPointCrops>>([
    {
      axis: 0,
      direction: 0,
      lat: 0,
      lon: 0,
      z: 0,
      distance: 0,
    },
  ]);
  const [shiftedLocation, setShiftedLocation] = useState<string>();

  const [form] = Form.useForm();

  const onFinish = (values: ILocationInput) => {
    const listShiftPointCrops = splitFunction(values);

    if (Array.isArray(listShiftPointCrops)) {
      setShiftedLocation(shiftBlock(listShiftPointCrops));
    }
  };

  const onReset = () => {
    form.resetFields();
  };

  return (
    <div className={styles.container}>
      <p>
        V√¨ vi·∫øt ti·∫øng Anh s·ª£ ng∆∞·ªùi ƒë·ªçc kh√¥ng hi·ªÉu n√™n xin ph√©p ƒë∆∞·ª£c vi·∫øt t√†i li·ªáu b·∫±ng ti·∫øng vi·ªát üòä
      </p>
      <h3 style={{ color: "white" }}>
        T·ªãnh ti·∫øn kh·ªëi (Shift block)
      </h3>
      <p>
        C√¥ng c·ª• n√†y gi√∫p ng∆∞·ªùi d√πng l·∫•y ƒë∆∞·ª£c t·∫≠p h·ª£p to·∫° ƒë·ªô c√°c ƒëi·ªÉm c·ªßa m·ªôt kh·ªëi c√≥ kho·∫£ng c√°ch nh·∫•t ƒë·ªãnh t·ª´ m·ªôt kh·ªëi cho tr∆∞·ªõc. Nh·∫≠p c√°c th√¥ng tin v√†o form bao g·ªìm:
      </p>
      <ul>
        <li>Axis l√† tr·ª•c t·ªãnh ti·∫øn, g·ªìm c√≥ tr·ª•c Ox v√† Oy ·ª©ng v·ªõi tr·ª•c ƒë√£ v·∫Ω tr√™n b·∫£n ƒë·ªì</li>
        <li>Direction l√† h∆∞·ªõng t·ªãnh ti·∫øn, ch·ªçn gi√° tr·ªã positive (d∆∞∆°ng) s·∫Ω t·ªãnh ti·∫øn ƒëi·ªÉm theo chi·ªÅu d∆∞∆°ng c·ªßa tr·ª•c to·∫° ƒë·ªô ƒë√£ ch·ªçn. Ng∆∞·ª£c l·∫°i v·ªõi gi√° tr·ªã negative (√¢m)</li>
        <li>Point array l√† danh s√°ch c√°c ƒëi·ªÉm c·ªßa kh·ªëi c·∫ßn t·ªãnh ti·∫øn (nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng m·∫£ng c·ªßa javascript)</li>
        <li>Distance l√† kho·∫£ng c√°ch t·ªãnh ti·∫øn t√≠nh b·∫±ng ƒë∆°n v·ªã m√©t so v·ªõi ƒëi·ªÉm g·ªëc (vui l√≤ng nh·∫≠p s·ªë nguy√™n d∆∞∆°ng)</li>
      </ul>
      <p>
        Nh·∫•n n√∫t Shift, c√¥ng c·ª• s·∫Ω tr·∫£ v·ªÅ to·∫° ƒë·ªô c·ªßa danh s√°ch ƒëi·ªÉm thu·ªôc kh·ªëi sau khi ƒë√£ t·ªãnh ti·∫øn.
      </p>
      <Form
        {...layout}
        form={form}
        name="control-hooks"
        onFinish={onFinish}
        style={{ backgroundColor: "white" }}
      >
        <Form.Item name="axis" label="Axis" rules={[{ required: true }]}>
          <Select placeholder="Choose shift axis" style={{ width: 300 }}>
            <Option value="0">Ox</Option>
            <Option value="1">Oy</Option>
          </Select>
        </Form.Item>
        <Form.Item
          name="direction"
          label="Direction"
          rules={[{ required: true }]}
        >
          <Select placeholder="Choose shift direction" style={{ width: 300 }}>
            <Option value="1">Positive</Option>
            <Option value="-1">Negative</Option>
          </Select>
        </Form.Item>
        {/* <Form.Item name="long" label="Longitude" rules={[{ required: true }]}>
          <Input placeholder='Longitude' />
        </Form.Item>
        <Form.Item name="lat" label="Latitude" rules={[{ required: true }]}>
          <Input placeholder='Latitude' />
        </Form.Item > */}
        <Form.Item
          name={"location"}
          label="Point array"
          rules={[{ required: true, type: "string" }]}
        >
          <Input.TextArea placeholder="[longtude, latitude]" />
        </Form.Item>
        <Form.Item name="z" label="Z offset" rules={[{ required: true }]}>
          <Input placeholder="Z offset" />
        </Form.Item>
        <Form.Item
          name="distance"
          label="Distance"
          rules={[{ required: true }]}
        >
          <Input placeholder="Distance" />
        </Form.Item>
        <Form.Item>
          <Button
            type="primary"
            shape="round"
            icon={<CaretUpOutlined />}
            size={"large"}
            htmlType="submit"
          >
            Shift
          </Button>
          <Button htmlType="button" onClick={onReset}>
            Reset
          </Button>
        </Form.Item>
      </Form>

      <TextArea
        rows={15}
        placeholder="Result will be shown here, ph·ªù r√©t c·∫ßn tr√¥n A tu c√≥p pi"
        value={shiftedLocation}
      />
    </div>
  );
};

export default ShiftBlock;
